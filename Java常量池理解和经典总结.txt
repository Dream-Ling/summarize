一．相关知识
1. 什么是常量。
第一种：是一个值，这个值本身，我们就叫做常量。
整型常量：1024
实型常量：1.024
字符常量：'g' 'c' 'w'
字符串常量："gcw"
逻辑常量：true false
这只是我们平时我们的一个说法而已，比如数字1024，我们说它是一个int类型的常量。
第二种：不可变的变量，我们也称为常量。就是被我们都知道的关键字final修饰的变量，final修饰的变量，只要一经赋值，就不可以改变。可能它本身是个变量，但是被final修饰，我们可以认为是个常量。比如：
final int i=1024;
2.常量池
常量池分为两种：静态常量池和运行时常量池。
静态常量池也就是Class文件中的常量池，我们这里举一个简单的例子，下面是一个HelloWorld的与源文件和Class文件。
源文件：

public class HelloWorld{
public static void main(String args[]){
System.out.println("hello world");
}
}

Class文件：

我们一个一个的来分析。
1>    魔数
魔数就是这个文件的前四个字节：ca fe ba be(漱壕).它的唯一作用是确定这个屋文件是否可以被JVM接受。很多文件存储标准中都使用魔术来进行身份识别。
2>    版本号
第5和第6个字节是次版本号，第7个和第8 个是主版本号。这里的第7和第8位是0034，即：0x0034。0x0034转为10进制是52。Java的版本是从45开始的然而从1.0 到1.1 是45.0到45.3, 之后就是1.2 对应46， 1.3 对应47 … 1.6 对应50,我这里是1.6.0_24对应的是52，就是0x0034;
3>    常量池的入口
由于常量池中的常量的数量不是固定的，所以常量池的入口需要放置一项u2类型的数据，代表常量池的容量计数值。这里的常量池容量计数值是从1开始的。如图常量池的容量：0x001d(29)。所以共有29个常量。
4>    常量池
常量池中主要存放两类常量：字面量和符号引用。字面量比较接近Java语言层面的常量概念。就是我们什么提到的常量。而符号引用则属于编译原理的方面的概念。包括以下三类常量：
     i> 类和接口的全限定名
    ii>字段的名称和描述符
   iii>方法的名称和描述符
（关于Class文件就先讲到这里，以后有机会再继续）
运行时常量池：运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外还有一项信息是常量池。
用于存放编译期生成的字面量和符号应用，这部分内容将在类加载后进入方法区的时候存到运行时常量池中。运行时常量池还有个更重要的的特征：动态性。Java要求，编译期的常量池的内容可以进入运行时常量池，运行时产生的常量也可以放入池中。常用的是String类的intern()方法。
3.常量池的好处
常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。
例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。
（1）节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。
（2）节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。（摘自博客：http://www.jianshu.com/p/c7f47de2ee80  非常感谢此作者的文章）
4.equals和==的区别
 Java中的数据类型分两种：基本数据类型和引用数据类型。
1> 基本数据类型 byte short int long char float double boolean
对于这些都是用的==来比较两者的值是不是相等。
2> 引用数据类型
一般情况下，equals和==是一样的都是比较的两者的地址值是不是一样。但是有特殊的情况：我们都知道我们使用的类都是继承自Object基类，Object中equals方法中是使用==来实现的，即比较的是两者的地址值。但是Object的子类可以重写equals方法，比如Date、String、Integer等类都是重写了equals都是重写了，比较的是值是否相等。例如String类的源码：

public boolean equals(Object anObject) {
if (this == anObject) {
return true;
}
if (anObject instanceof String) {
String anotherString = (String)anObject;
int n = count;
if (n == anotherString.count) {
char v1[] = value;
char v2[] = anotherString.value;
int i = offset;
int j = anotherString.offset;
while (n-- != 0) {
if (v1[i++] != v2[j++])
return false;
}
return true;
}
}
return false;
}

先比较是不是指向同一个地址，如果不是再比较两者是不是值相等。这个时候equals和==就不一样了。